extends layout

block title 
	title 第七章 网格系统

block content
	style.
		.row.this-page *[class*=col-]{
			background-color: #eee;
			border: 1px solid #ccc;
		}
	h2.text-primary 第七章 网格系统

	//- 
	h3.text-primary 7.1 实现原理
	p bootstrap将整个可视区域分为
		strong.text-muted 12
		|等分。不过也可根据自己需要重新编译将修改份数，比如24或32，不过不建议这样使用。
	.row.this-page
		- var i = 0
		while (i<4)
			.col-xs-12.col-sm-12.col-md-12.col-lg-12 .colomun 12 row #{i++}

	//- '
	h3.text-primary 7.2 工作原理
	p 基本结构 .container > (.row > .col-?-? * ?) * ? 
	p.text-muted 工作原理：
	ol 
		li 数据行
			code .row 
			|必须包含在容器
			code .container
			|中，以便为其赋予对齐方式和内边距。如：
			pre 
				|&lt;div class="container"&gt;
				|	&lt;div class="row"&gt;&lt;/div&gt;
				|&lt;/div&gt;
		li 行
			code .row
			|中可以添加
			code .col-?-?
			|，但数列之和不能超过平分的总列数，比如12。
			pre
				|&lt;div class="container"&gt;
				|	&lt;div class="row"&gt;
				|		&lt;div class="col-md-<span class="text-danger">4</span>"&gt;&lt;/div&gt;
				|		&lt;div class="col-md-<span class="text-danger">8</span>"&gt;
				|	&lt;/div&gt;
				|&lt;/div&gt;
		li 具体内容放置在列
			code .col-?-?
			|内，并且只有列
			code .col-?-?
			|才能作为行容器
			code .row
			|的直接子元素
		li 个列通过padding来创建之间的间隔，
			|最前和最后一列通过-margin来抵消padding
	p 下面根据原理图简单解释：
	img(src="images/colomun.jpg", alt="").img-responsive
	ol
		li 最外边框，带有一大片白色区域，相当于浏览器的可视区域。
			|bootstrap网格系统带有响应式效果，针对4类浏览器（超小屏，小屏，中屏和大屏）。
			|其断点是：768px，992px和1220px。
		li 第二个边框（1）相当于容器
			code .container
			|。针对不同的浏览器，其宽度也不一样：自动,750px,970px和1170px。源码为：
			pre
				|.container {
				|  padding-right: 15px;
				|  padding-left: 15px;
				|  margin-right: auto;
				|  margin-left: auto;
				|  @media (min-width: 768px) {
				|  .container {
				|    width: 750px;
				|  }
				|  @media (min-width: 992px) {
				|  .container {
				|    width: 970px;
				|  }
				|  @media (min-width: 1200px) {
				|  .container {
				|    width: 1170px;
				|  }	
		li 每列左右都有15px的padding，使之间有间隔。
		li 为了使最后一列和最前一列与整行没有间隔在
			code .row 
			|上左右都设置了-15px的margin。

	//- 
	h3.text-primary 7.3 基本用法（列组合）
	p.text-warning 基本原则：列综合不能超过12，比如：

	.row.this-page
		.col-xs-4.col-sm-4.col-md-4.col-lg-4 我占4列
		.col-xs-8.col-sm-8.col-md-8.col-lg-8 我占8列
	.row.this-page 
		each i in [1,2,3]
			.col-xs-4.col-sm-4.col-md-4.col-lg-4 我占4列
	.row.this-page 
		.col-xs-3.col-sm-3.col-md-3.col-lg-3 我占3列
		.col-xs-6.col-sm-6.col-md-6.col-lg-6 我占6列
		.col-xs-3.col-sm-3.col-md-3.col-lg-3 我占3列
	p.text-muted 实现原理：每列左浮动，并根据列数设置宽度。

	//- 
	p.text-primary 7.4 基本用法（列偏移）
	p 如果不想两列紧邻，也不想通过margin来实现偏移，可以在
		code .col-?-? 
		|基础上追加类
		code .col-?-offset-?
		|。实现向右偏移，比如.cole-md-offset-3就相当于左margin两列.
	p.text-warning 每行中，列数及偏移列数总和也不能超过12。
	p 实现原理：设置margin-left值。

	.row.this-page
		.col-xs-2.col-sm-2.col-md-2.col-lg-2 我占2列，不偏移
		each i in [1, 2]
			.col-xs-2.col-sm-2.col-md-2.col-lg-2.col-xs-offset-1.col-sm-offset-1.col-md-offset-1.col-lg-offset-1 我占2列，偏移一格
		.col-xs-3.col-sm-3.col-md-3.col-lg-3.col-sm-offset-1.col-md-offset-1.col-lg-offset-1 我占3格，偏移一格				

	//- 
	h3.text-primary 7.4 基本用法（位置互换）
	p 默认状态下，列按照文档顺序排列，如果需要两列互换位置，可以添加类
		code .col-*-push-? 
		|和
		code .col-*-pull-?
		|其中？代表列数，push表示向右，pull表示向左拉近。
		|比如.container>.row>.col-sm-4 + .col-sm-8
		|中的两列需要互换位置，就应改为：.container>.row>.col-sm-4.col-sm-push-8 + col.sm-8.col-sm-pull-4。
	p 一般状态：

		.row.this-page
			.col-xs-4.col-sm-4.col-md-4.col-lg-4 我占4列
			.col-xs-8.col-sm-8.col-md-8.col-lg-8 我占8列	
	p 交换位置后：
		.row.this-page
			.col-xs-4.col-sm-4.col-md-4.col-lg-4.col-xs-push-8.col-sm-push-8.col-md-push-8.col-lg-push-8 我占4列
			.col-xs-8.col-sm-8.col-md-8.col-lg-8.col-xs-pull-4.col-sm-pull-4.col-md-pull-4.col-lg-pull-4 我占8列

	//- 
	h3.text-primary 7.5 基本用法（列嵌套）
	p 在一列
		code .col-?-?
		|中可以插入一个或多个
		code .row
		|容器，其宽度为100%，也就是外部列宽度。然后在这些行中插入列。
	.row.this-page
		.col-xs-8.col-sm-8.col-md-8.col-lg-8 我占8列，里面插入了一个网格
			.row.this-page
				each i in [1,2,3]
					.col-xs-4.col-sm-4.col-md-4.col-lg-4 我是内层列，我占4列
